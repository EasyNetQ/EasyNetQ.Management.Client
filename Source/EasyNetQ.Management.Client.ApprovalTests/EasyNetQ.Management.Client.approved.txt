namespace EasyNetQ.Management.Client
{
    public interface IManagementClient : System.IDisposable
    {
        System.Uri Endpoint { get; }
        System.Threading.Tasks.Task<bool> CheckAsync(EasyNetQ.Management.Client.RelativePath path, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task DeleteAsync(EasyNetQ.Management.Client.RelativePath path, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<TResult> GetAsync<TResult>(EasyNetQ.Management.Client.RelativePath path, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>? queryParameters, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task PostAsync(EasyNetQ.Management.Client.RelativePath path, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task PostAsync<TBody>(EasyNetQ.Management.Client.RelativePath path, TBody item, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<TResult> PostAsync<TBody, TResult>(EasyNetQ.Management.Client.RelativePath path, TBody item, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task PutAsync(EasyNetQ.Management.Client.RelativePath path, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task PutAsync<TBody>(EasyNetQ.Management.Client.RelativePath path, TBody item, System.Threading.CancellationToken cancellationToken = default);
    }
    public static class IManagementClientExtensions
    {
        public static void ChangeUserPassword(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.User user, string newPassword, System.Threading.CancellationToken cancellationToken = default) { }
        public static void ChangeUserPassword(this EasyNetQ.Management.Client.IManagementClient client, string userName, string newPassword, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task ChangeUserPasswordAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.User user, string newPassword, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task ChangeUserPasswordAsync(this EasyNetQ.Management.Client.IManagementClient client, string userName, string newPassword, System.Threading.CancellationToken cancellationToken = default) { }
        public static bool Check(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.RelativePath path, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CloseConnection(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Connection connection, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CloseConnection(this EasyNetQ.Management.Client.IManagementClient client, string connectionName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CloseConnectionAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Connection connection, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CloseConnectionAsync(this EasyNetQ.Management.Client.IManagementClient client, string connectionName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateExchange(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, EasyNetQ.Management.Client.Model.ExchangeInfo exchangeInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateExchange(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, EasyNetQ.Management.Client.Model.ExchangeInfo exchangeInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateExchange(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, EasyNetQ.Management.Client.Model.ExchangeInfo exchangeInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateExchangeAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, EasyNetQ.Management.Client.Model.ExchangeInfo exchangeInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateExchangeAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, EasyNetQ.Management.Client.Model.ExchangeInfo exchangeInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateExchangeAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, EasyNetQ.Management.Client.Model.ExchangeInfo exchangeInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateExchangeBinding(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName sourceExchange, EasyNetQ.Management.Client.Model.ExchangeName destinationExchange, EasyNetQ.Management.Client.Model.BindingInfo bindingInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateExchangeBinding(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string sourceExchangeName, string destinationExchangeName, EasyNetQ.Management.Client.Model.BindingInfo bindingInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateExchangeBinding(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string sourceExchangeName, string destinationExchangeName, EasyNetQ.Management.Client.Model.BindingInfo bindingInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateExchangeBindingAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName sourceExchange, EasyNetQ.Management.Client.Model.ExchangeName destinationExchange, EasyNetQ.Management.Client.Model.BindingInfo bindingInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateExchangeBindingAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string sourceExchangeName, string destinationExchangeName, EasyNetQ.Management.Client.Model.BindingInfo bindingInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateExchangeBindingAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string sourceExchangeName, string destinationExchangeName, EasyNetQ.Management.Client.Model.BindingInfo bindingInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateFederationUpstream(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string federationUpstreamName, EasyNetQ.Management.Client.Model.ParameterFederationValue federationUpstreamDescription, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateFederationUpstream(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string federationUpstreamName, EasyNetQ.Management.Client.Model.ParameterFederationValue federationUpstreamDescription, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateFederationUpstreamAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string federationUpstreamName, EasyNetQ.Management.Client.Model.ParameterFederationValue federationUpstreamDescription, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateFederationUpstreamAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string federationUpstreamName, EasyNetQ.Management.Client.Model.ParameterFederationValue federationUpstreamDescription, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateParameter(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Parameter parameter, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateParameter(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Parameter parameter, object parameterValue, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateParameter(this EasyNetQ.Management.Client.IManagementClient client, string componentName, EasyNetQ.Management.Client.Model.Vhost vhost, string parameterName, object parameterValue, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateParameter(this EasyNetQ.Management.Client.IManagementClient client, string componentName, string vhostName, string parameterName, object parameterValue, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateParameterAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Parameter parameter, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateParameterAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Parameter parameter, object parameterValue, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateParameterAsync(this EasyNetQ.Management.Client.IManagementClient client, string componentName, EasyNetQ.Management.Client.Model.Vhost vhost, string parameterName, object parameterValue, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateParameterAsync(this EasyNetQ.Management.Client.IManagementClient client, string componentName, string vhostName, string parameterName, object parameterValue, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreatePermission(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, EasyNetQ.Management.Client.Model.User user, EasyNetQ.Management.Client.Model.PermissionInfo permissionInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreatePermission(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string userName, EasyNetQ.Management.Client.Model.PermissionInfo permissionInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreatePermission(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, EasyNetQ.Management.Client.Model.User user, EasyNetQ.Management.Client.Model.PermissionInfo permissionInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreatePermission(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string userName, EasyNetQ.Management.Client.Model.PermissionInfo permissionInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreatePermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, EasyNetQ.Management.Client.Model.User user, EasyNetQ.Management.Client.Model.PermissionInfo permissionInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreatePermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string userName, EasyNetQ.Management.Client.Model.PermissionInfo permissionInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreatePermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, EasyNetQ.Management.Client.Model.User user, EasyNetQ.Management.Client.Model.PermissionInfo permissionInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreatePermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string userName, EasyNetQ.Management.Client.Model.PermissionInfo permissionInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreatePolicy(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Policy policy, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreatePolicy(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string policyName, EasyNetQ.Management.Client.Model.PolicyInfo policyInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreatePolicy(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string policyName, EasyNetQ.Management.Client.Model.PolicyInfo policyInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreatePolicyAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Policy policy, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreatePolicyAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string policyName, EasyNetQ.Management.Client.Model.PolicyInfo policyInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreatePolicyAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string policyName, EasyNetQ.Management.Client.Model.PolicyInfo policyInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateQueue(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.QueueName queue, EasyNetQ.Management.Client.Model.QueueInfo queueInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateQueue(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string queueName, EasyNetQ.Management.Client.Model.QueueInfo queueInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateQueue(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string queueName, EasyNetQ.Management.Client.Model.QueueInfo queueInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateQueueAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.QueueName queue, EasyNetQ.Management.Client.Model.QueueInfo queueInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateQueueAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string queueName, EasyNetQ.Management.Client.Model.QueueInfo queueInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateQueueAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string queueName, EasyNetQ.Management.Client.Model.QueueInfo queueInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateQueueBinding(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, EasyNetQ.Management.Client.Model.QueueName queue, EasyNetQ.Management.Client.Model.BindingInfo bindingInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateQueueBinding(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, string queueName, EasyNetQ.Management.Client.Model.BindingInfo bindingInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateQueueBinding(this EasyNetQ.Management.Client.IManagementClient client, string exchangeName, EasyNetQ.Management.Client.Model.QueueName queue, EasyNetQ.Management.Client.Model.BindingInfo bindingInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateQueueBinding(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, string queueName, EasyNetQ.Management.Client.Model.BindingInfo bindingInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateQueueBinding(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, string queueName, EasyNetQ.Management.Client.Model.BindingInfo bindingInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateQueueBindingAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, EasyNetQ.Management.Client.Model.QueueName queue, EasyNetQ.Management.Client.Model.BindingInfo bindingInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateQueueBindingAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, string queueName, EasyNetQ.Management.Client.Model.BindingInfo bindingInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateQueueBindingAsync(this EasyNetQ.Management.Client.IManagementClient client, string exchangeName, EasyNetQ.Management.Client.Model.QueueName queue, EasyNetQ.Management.Client.Model.BindingInfo bindingInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateQueueBindingAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, string queueName, EasyNetQ.Management.Client.Model.BindingInfo bindingInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateQueueBindingAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, string queueName, EasyNetQ.Management.Client.Model.BindingInfo bindingInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateShovel(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string shovelName, EasyNetQ.Management.Client.Model.ParameterShovelValue shovelDescription, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateShovel(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string shovelName, EasyNetQ.Management.Client.Model.ParameterShovelValue shovelDescription, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateShovelAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string shovelName, EasyNetQ.Management.Client.Model.ParameterShovelValue shovelDescription, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateShovelAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string shovelName, EasyNetQ.Management.Client.Model.ParameterShovelValue shovelDescription, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateTopicPermission(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, EasyNetQ.Management.Client.Model.User user, EasyNetQ.Management.Client.Model.TopicPermissionInfo topicPermissionInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateTopicPermission(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string userName, EasyNetQ.Management.Client.Model.TopicPermissionInfo topicPermissionInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateTopicPermission(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, EasyNetQ.Management.Client.Model.User user, EasyNetQ.Management.Client.Model.TopicPermissionInfo topicPermissionInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateTopicPermission(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string userName, EasyNetQ.Management.Client.Model.TopicPermissionInfo topicPermissionInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateTopicPermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, EasyNetQ.Management.Client.Model.User user, EasyNetQ.Management.Client.Model.TopicPermissionInfo topicPermissionInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateTopicPermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string userName, EasyNetQ.Management.Client.Model.TopicPermissionInfo topicPermissionInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateTopicPermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, EasyNetQ.Management.Client.Model.User user, EasyNetQ.Management.Client.Model.TopicPermissionInfo topicPermissionInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateTopicPermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string userName, EasyNetQ.Management.Client.Model.TopicPermissionInfo topicPermissionInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateUser(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.User user, EasyNetQ.Management.Client.Model.UserInfo userInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateUser(this EasyNetQ.Management.Client.IManagementClient client, string userName, EasyNetQ.Management.Client.Model.UserInfo userInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateUserAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.User user, EasyNetQ.Management.Client.Model.UserInfo userInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateUserAsync(this EasyNetQ.Management.Client.IManagementClient client, string userName, EasyNetQ.Management.Client.Model.UserInfo userInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateVhost(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static void CreateVhost(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateVhostAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task CreateVhostAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void Delete(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.RelativePath path, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteBinding(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Binding binding, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteBindingAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Binding binding, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteExchange(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteExchange(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteExchange(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteExchangeAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteExchangeAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteExchangeAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteExchangeBinding(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName sourceExchange, EasyNetQ.Management.Client.Model.ExchangeName destinationExchange, string propertiesKey, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteExchangeBinding(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string sourceExchangeName, string destinationExchangeName, string propertiesKey, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteExchangeBinding(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string sourceExchangeName, string destinationExchangeName, string propertiesKey, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteExchangeBindingAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName sourceExchange, EasyNetQ.Management.Client.Model.ExchangeName destinationExchange, string propertiesKey, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteExchangeBindingAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string sourceExchangeName, string destinationExchangeName, string propertiesKey, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteExchangeBindingAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string sourceExchangeName, string destinationExchangeName, string propertiesKey, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteParameter(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Parameter parameter, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteParameter(this EasyNetQ.Management.Client.IManagementClient client, string componentName, EasyNetQ.Management.Client.Model.Vhost vhost, string parameterName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteParameter(this EasyNetQ.Management.Client.IManagementClient client, string componentName, string vhostName, string parameterName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteParameterAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Parameter parameter, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteParameterAsync(this EasyNetQ.Management.Client.IManagementClient client, string componentName, EasyNetQ.Management.Client.Model.Vhost vhost, string parameterName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteParameterAsync(this EasyNetQ.Management.Client.IManagementClient client, string componentName, string vhostName, string parameterName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeletePermission(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Permission permission, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeletePermission(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, EasyNetQ.Management.Client.Model.User user, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeletePermission(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string userName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeletePermission(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, EasyNetQ.Management.Client.Model.User user, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeletePermission(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string userName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeletePermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Permission permission, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeletePermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, EasyNetQ.Management.Client.Model.User user, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeletePermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string userName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeletePermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, EasyNetQ.Management.Client.Model.User user, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeletePermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string userName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeletePolicy(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string policyName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeletePolicy(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string policyName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeletePolicyAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string policyName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeletePolicyAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string policyName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteQueue(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.QueueName queue, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteQueue(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteQueue(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteQueueAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.QueueName queue, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteQueueAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteQueueAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteQueueBinding(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, EasyNetQ.Management.Client.Model.QueueName queue, string propertiesKey, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteQueueBinding(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, string queueName, string propertiesKey, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteQueueBinding(this EasyNetQ.Management.Client.IManagementClient client, string exchangeName, EasyNetQ.Management.Client.Model.QueueName queue, string propertiesKey, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteQueueBinding(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, string queueName, string propertiesKey, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteQueueBinding(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, string queueName, string propertiesKey, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteQueueBindingAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, EasyNetQ.Management.Client.Model.QueueName queue, string propertiesKey, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteQueueBindingAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, string queueName, string propertiesKey, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteQueueBindingAsync(this EasyNetQ.Management.Client.IManagementClient client, string exchangeName, EasyNetQ.Management.Client.Model.QueueName queue, string propertiesKey, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteQueueBindingAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, string queueName, string propertiesKey, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteQueueBindingAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, string queueName, string propertiesKey, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteTopicPermission(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.TopicPermission topicPermission, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteTopicPermission(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, EasyNetQ.Management.Client.Model.User user, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteTopicPermission(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string userName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteTopicPermission(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, EasyNetQ.Management.Client.Model.User user, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteTopicPermission(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string userName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteTopicPermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.TopicPermission topicPermission, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteTopicPermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, EasyNetQ.Management.Client.Model.User user, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteTopicPermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string userName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteTopicPermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, EasyNetQ.Management.Client.Model.User user, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteTopicPermissionAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string userName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteUser(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.User user, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteUser(this EasyNetQ.Management.Client.IManagementClient client, string userName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteUserAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.User user, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteUserAsync(this EasyNetQ.Management.Client.IManagementClient client, string userName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteVhost(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DeleteVhost(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteVhostAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DeleteVhostAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DisableTracing(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static void DisableTracing(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DisableTracingAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task DisableTracingAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void EnableTracing(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static void EnableTracing(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task EnableTracingAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task EnableTracingAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static TResult Get<TResult>(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.RelativePath path, System.Threading.CancellationToken cancellationToken = default) { }
        public static TResult Get<TResult>(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.RelativePath path, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>? queryParameters, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<TResult> GetAsync<TResult>(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.RelativePath path, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetBindings(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetBindings(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetBindings(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetBindingsAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetBindingsAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetBindingsAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetBindingsForQueue(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.QueueName queue, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetBindingsForQueue(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetBindingsForQueue(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetBindingsForQueueAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.QueueName queue, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetBindingsForQueueAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetBindingsForQueueAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetBindingsWithDestination(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetBindingsWithDestination(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetBindingsWithDestination(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetBindingsWithDestinationAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetBindingsWithDestinationAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetBindingsWithDestinationAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetBindingsWithSource(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetBindingsWithSource(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetBindingsWithSource(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetBindingsWithSourceAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetBindingsWithSourceAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetBindingsWithSourceAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Channel GetChannel(this EasyNetQ.Management.Client.IManagementClient client, string channelName, EasyNetQ.Management.Client.RatesCriteria? ratesCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Channel> GetChannelAsync(this EasyNetQ.Management.Client.IManagementClient client, string channelName, EasyNetQ.Management.Client.RatesCriteria? ratesCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Channel> GetChannels(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Channel> GetChannels(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Connection connection, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Channel> GetChannels(this EasyNetQ.Management.Client.IManagementClient client, string connectionName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Channel>> GetChannelsAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Channel>> GetChannelsAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Connection connection, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Channel>> GetChannelsAsync(this EasyNetQ.Management.Client.IManagementClient client, string connectionName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Connection> GetConnections(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Connection> GetConnections(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Connection> GetConnections(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Connection>> GetConnectionsAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Connection>> GetConnectionsAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Connection>> GetConnectionsAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Consumer> GetConsumers(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Consumer> GetConsumers(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Consumer> GetConsumers(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Consumer>> GetConsumersAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Consumer>> GetConsumersAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Consumer>> GetConsumersAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Definitions GetDefinitions(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Definitions> GetDefinitionsAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Exchange GetExchange(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, EasyNetQ.Management.Client.RatesCriteria? ratesCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Exchange GetExchange(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, EasyNetQ.Management.Client.RatesCriteria? ratesCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Exchange GetExchange(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, EasyNetQ.Management.Client.RatesCriteria? ratesCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Exchange> GetExchangeAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, EasyNetQ.Management.Client.RatesCriteria? ratesCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Exchange> GetExchangeAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, EasyNetQ.Management.Client.RatesCriteria? ratesCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Exchange> GetExchangeAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, EasyNetQ.Management.Client.RatesCriteria? ratesCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetExchangeBindings(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName sourceExchange, EasyNetQ.Management.Client.Model.ExchangeName destinationExchange, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetExchangeBindings(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string sourceExchangeName, string destinationExchangeName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetExchangeBindings(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string sourceExchangeName, string destinationExchangeName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetExchangeBindingsAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName sourceExchange, EasyNetQ.Management.Client.Model.ExchangeName destinationExchange, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetExchangeBindingsAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string sourceExchangeName, string destinationExchangeName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetExchangeBindingsAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string sourceExchangeName, string destinationExchangeName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Exchange> GetExchanges(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Exchange> GetExchanges(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Exchange> GetExchanges(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Exchange>> GetExchangesAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Exchange>> GetExchangesAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Exchange>> GetExchangesAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.PageResult<EasyNetQ.Management.Client.Model.Exchange> GetExchangesByPage(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.PageCriteria pageCriteria, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.PageResult<EasyNetQ.Management.Client.Model.Exchange> GetExchangesByPage(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, EasyNetQ.Management.Client.PageCriteria pageCriteria, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.PageResult<EasyNetQ.Management.Client.Model.Exchange> GetExchangesByPage(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, EasyNetQ.Management.Client.PageCriteria pageCriteria, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.PageResult<EasyNetQ.Management.Client.Model.Exchange>> GetExchangesByPageAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.PageCriteria pageCriteria, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.PageResult<EasyNetQ.Management.Client.Model.Exchange>> GetExchangesByPageAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, EasyNetQ.Management.Client.PageCriteria pageCriteria, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.PageResult<EasyNetQ.Management.Client.Model.Exchange>> GetExchangesByPageAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, EasyNetQ.Management.Client.PageCriteria pageCriteria, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Parameter GetFederationUpstream(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string federationUpstreamName, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Parameter GetFederationUpstream(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string federationUpstreamName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Parameter> GetFederationUpstreamAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string federationUpstreamName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Parameter> GetFederationUpstreamAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string federationUpstreamName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Federation> GetFederations(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Federation>> GetFederationsAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Message> GetMessagesFromQueue(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.QueueName queue, EasyNetQ.Management.Client.Model.GetMessagesFromQueueInfo getMessagesFromQueueInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Message> GetMessagesFromQueue(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string queueName, EasyNetQ.Management.Client.Model.GetMessagesFromQueueInfo getMessagesFromQueueInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Message> GetMessagesFromQueue(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string queueName, EasyNetQ.Management.Client.Model.GetMessagesFromQueueInfo getMessagesFromQueueInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Message>> GetMessagesFromQueueAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.QueueName queue, EasyNetQ.Management.Client.Model.GetMessagesFromQueueInfo getMessagesFromQueueInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Message>> GetMessagesFromQueueAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string queueName, EasyNetQ.Management.Client.Model.GetMessagesFromQueueInfo getMessagesFromQueueInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Message>> GetMessagesFromQueueAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string queueName, EasyNetQ.Management.Client.Model.GetMessagesFromQueueInfo getMessagesFromQueueInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Node> GetNodes(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Node>> GetNodesAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Overview GetOverview(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.LengthsCriteria? lengthsCriteria = null, EasyNetQ.Management.Client.RatesCriteria? ratesCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Overview> GetOverviewAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.LengthsCriteria? lengthsCriteria = null, EasyNetQ.Management.Client.RatesCriteria? ratesCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Parameter GetParameter(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Parameter parameter, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Parameter GetParameter(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string componentName, string parameterName, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Parameter GetParameter(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string componentName, string parameterName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Parameter> GetParameterAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Parameter parameter, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Parameter> GetParameterAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string componentName, string parameterName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Parameter> GetParameterAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string componentName, string parameterName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Parameter> GetParameters(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Parameter> GetParameters(this EasyNetQ.Management.Client.IManagementClient client, string componentName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Parameter> GetParameters(this EasyNetQ.Management.Client.IManagementClient client, string componentName, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Parameter> GetParameters(this EasyNetQ.Management.Client.IManagementClient client, string componentName, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Parameter>> GetParametersAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Parameter>> GetParametersAsync(this EasyNetQ.Management.Client.IManagementClient client, string componentName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Parameter>> GetParametersAsync(this EasyNetQ.Management.Client.IManagementClient client, string componentName, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Parameter>> GetParametersAsync(this EasyNetQ.Management.Client.IManagementClient client, string componentName, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Permission> GetPermissions(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Permission>> GetPermissionsAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Policy> GetPolicies(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Policy>> GetPoliciesAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Queue GetQueue(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.QueueName queue, EasyNetQ.Management.Client.LengthsCriteria? lengthsCriteria = null, EasyNetQ.Management.Client.RatesCriteria? ratesCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Queue GetQueue(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string queueName, EasyNetQ.Management.Client.LengthsCriteria? lengthsCriteria = null, EasyNetQ.Management.Client.RatesCriteria? ratesCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Queue GetQueue(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string queueName, EasyNetQ.Management.Client.LengthsCriteria? lengthsCriteria = null, EasyNetQ.Management.Client.RatesCriteria? ratesCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Queue> GetQueueAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.QueueName queue, EasyNetQ.Management.Client.LengthsCriteria? lengthsCriteria = null, EasyNetQ.Management.Client.RatesCriteria? ratesCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Queue> GetQueueAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string queueName, EasyNetQ.Management.Client.LengthsCriteria? lengthsCriteria = null, EasyNetQ.Management.Client.RatesCriteria? ratesCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Queue> GetQueueAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string queueName, EasyNetQ.Management.Client.LengthsCriteria? lengthsCriteria = null, EasyNetQ.Management.Client.RatesCriteria? ratesCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetQueueBindings(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, EasyNetQ.Management.Client.Model.QueueName queue, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetQueueBindings(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetQueueBindings(this EasyNetQ.Management.Client.IManagementClient client, string exchangeName, EasyNetQ.Management.Client.Model.QueueName queue, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetQueueBindings(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> GetQueueBindings(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetQueueBindingsAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, EasyNetQ.Management.Client.Model.QueueName queue, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetQueueBindingsAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetQueueBindingsAsync(this EasyNetQ.Management.Client.IManagementClient client, string exchangeName, EasyNetQ.Management.Client.Model.QueueName queue, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetQueueBindingsAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding>> GetQueueBindingsAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Queue> GetQueues(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.StatsCriteria? statsCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Queue> GetQueues(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, EasyNetQ.Management.Client.StatsCriteria? statsCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Queue> GetQueues(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, EasyNetQ.Management.Client.StatsCriteria? statsCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Queue>> GetQueuesAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.StatsCriteria? statsCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Queue>> GetQueuesAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, EasyNetQ.Management.Client.StatsCriteria? statsCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Queue>> GetQueuesAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, EasyNetQ.Management.Client.StatsCriteria? statsCriteria = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.PageResult<EasyNetQ.Management.Client.Model.Queue> GetQueuesByPage(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.PageCriteria pageCriteria, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.PageResult<EasyNetQ.Management.Client.Model.Queue> GetQueuesByPage(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, EasyNetQ.Management.Client.PageCriteria pageCriteria, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.PageResult<EasyNetQ.Management.Client.Model.Queue> GetQueuesByPage(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, EasyNetQ.Management.Client.PageCriteria pageCriteria, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.PageResult<EasyNetQ.Management.Client.Model.Queue>> GetQueuesByPageAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.PageCriteria pageCriteria, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.PageResult<EasyNetQ.Management.Client.Model.Queue>> GetQueuesByPageAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, EasyNetQ.Management.Client.PageCriteria pageCriteria, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.PageResult<EasyNetQ.Management.Client.Model.Queue>> GetQueuesByPageAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, EasyNetQ.Management.Client.PageCriteria pageCriteria, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Parameter GetShovel(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string shovelName, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Parameter GetShovel(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string shovelName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Parameter> GetShovelAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string shovelName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Parameter> GetShovelAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string shovelName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.ShovelStatus> GetShovelStatuses(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.ShovelStatus> GetShovelStatuses(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.ShovelStatus> GetShovelStatuses(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.ShovelStatus>> GetShovelStatusesAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.ShovelStatus>> GetShovelStatusesAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.ShovelStatus>> GetShovelStatusesAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.TopicPermission> GetTopicPermissions(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.TopicPermission>> GetTopicPermissionsAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.User GetUser(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.User user, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.User GetUser(this EasyNetQ.Management.Client.IManagementClient client, string userName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.User> GetUserAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.User user, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.User> GetUserAsync(this EasyNetQ.Management.Client.IManagementClient client, string userName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.User> GetUsers(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.User>> GetUsersAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Vhost GetVhost(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.Vhost GetVhost(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Vhost> GetVhostAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.Vhost> GetVhostAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Vhost> GetVhosts(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Vhost>> GetVhostsAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static bool HaveAnyClassicQueuesWithoutSynchronisedMirrors(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<bool> HaveAnyClassicQueuesWithoutSynchronisedMirrorsAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static bool HaveAnyClusterAlarms(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<bool> HaveAnyClusterAlarmsAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static bool HaveAnyLocalAlarms(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<bool> HaveAnyLocalAlarmsAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static bool HaveAnyQuorumQueuesInCriticalState(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<bool> HaveAnyQuorumQueuesInCriticalStateAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static bool IsAlive(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static bool IsAlive(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<bool> IsAliveAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<bool> IsAliveAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void Post(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.RelativePath path, System.Threading.CancellationToken cancellationToken = default) { }
        public static void Post<TBody>(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.RelativePath path, TBody item, System.Threading.CancellationToken cancellationToken = default) { }
        public static TResult Post<TBody, TResult>(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.RelativePath path, TBody item, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.PublishResult Publish(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, EasyNetQ.Management.Client.Model.PublishInfo publishInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.PublishResult Publish(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, EasyNetQ.Management.Client.Model.PublishInfo publishInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static EasyNetQ.Management.Client.Model.PublishResult Publish(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, EasyNetQ.Management.Client.Model.PublishInfo publishInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.PublishResult> PublishAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.ExchangeName exchange, EasyNetQ.Management.Client.Model.PublishInfo publishInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.PublishResult> PublishAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string exchangeName, EasyNetQ.Management.Client.Model.PublishInfo publishInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<EasyNetQ.Management.Client.Model.PublishResult> PublishAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string exchangeName, EasyNetQ.Management.Client.Model.PublishInfo publishInfo, System.Threading.CancellationToken cancellationToken = default) { }
        public static void Purge(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.QueueName queue, System.Threading.CancellationToken cancellationToken = default) { }
        public static void Purge(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void Purge(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task PurgeAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.QueueName queue, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task PurgeAsync(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.Model.Vhost vhost, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task PurgeAsync(this EasyNetQ.Management.Client.IManagementClient client, string vhostName, string queueName, System.Threading.CancellationToken cancellationToken = default) { }
        public static void Put(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.RelativePath path, System.Threading.CancellationToken cancellationToken = default) { }
        public static void Put<TBody>(this EasyNetQ.Management.Client.IManagementClient client, EasyNetQ.Management.Client.RelativePath path, TBody item, System.Threading.CancellationToken cancellationToken = default) { }
        public static void RebalanceQueues(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task RebalanceQueuesAsync(this EasyNetQ.Management.Client.IManagementClient client, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class LengthsCriteria : System.IEquatable<EasyNetQ.Management.Client.LengthsCriteria>
    {
        public readonly System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> QueryParameters;
        public LengthsCriteria(int LengthsAge, int LengthsIncr) { }
        public int LengthsAge { get; init; }
        public int LengthsIncr { get; init; }
    }
    public class ManagementClient : EasyNetQ.Management.Client.IManagementClient, System.IDisposable
    {
        public ManagementClient(System.Net.Http.HttpClient httpClient, string username, string password) { }
        public ManagementClient(System.Uri endpoint, string username, string password, System.TimeSpan? timeout = default, System.Action<System.Net.Http.HttpRequestMessage>? configureHttpRequestMessage = null, System.Action<System.Net.Http.SocketsHttpHandler>? configureHttpHandler = null) { }
        [System.Obsolete("Please use another constructor")]
        public ManagementClient(string hostUrl, string username, string password, int portNumber = 15672, System.TimeSpan? timeout = default, System.Action<System.Net.Http.HttpRequestMessage>? configureHttpRequestMessage = null, bool ssl = false, System.Action<System.Net.Http.SocketsHttpHandler>? configureHttpHandler = null) { }
        public System.Uri Endpoint { get; }
        public System.Threading.Tasks.Task<bool> CheckAsync(EasyNetQ.Management.Client.RelativePath path, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task DeleteAsync(EasyNetQ.Management.Client.RelativePath path, System.Threading.CancellationToken cancellationToken = default) { }
        public void Dispose() { }
        public System.Threading.Tasks.Task<TResult> GetAsync<TResult>(EasyNetQ.Management.Client.RelativePath path, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>? queryParameters, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task PostAsync(EasyNetQ.Management.Client.RelativePath path, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task PostAsync<TItem>(EasyNetQ.Management.Client.RelativePath path, TItem item, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<TResult> PostAsync<TItem, TResult>(EasyNetQ.Management.Client.RelativePath path, TItem item, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task PutAsync(EasyNetQ.Management.Client.RelativePath path, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task PutAsync<TBody>(EasyNetQ.Management.Client.RelativePath path, TBody item, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class PageCriteria : System.IEquatable<EasyNetQ.Management.Client.PageCriteria>
    {
        public readonly System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> QueryParameters;
        public PageCriteria(int Page, int PageSize, string? Name = null, bool UseRegex = false) { }
        public string? Name { get; init; }
        public int PageSize { get; init; }
        public int Page { get; init; }
        public bool UseRegex { get; init; }
    }
    public class RatesCriteria : System.IEquatable<EasyNetQ.Management.Client.RatesCriteria>
    {
        public readonly System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> QueryParameters;
        public RatesCriteria(int MsgRatesAge, int MsgRatesIncr) { }
        public int MsgRatesAge { get; init; }
        public int MsgRatesIncr { get; init; }
    }
    public readonly struct RelativePath
    {
        public RelativePath(string segment) { }
        public string Build() { }
        public static EasyNetQ.Management.Client.RelativePath operator /(EasyNetQ.Management.Client.RelativePath parent, char segment) { }
        public static EasyNetQ.Management.Client.RelativePath operator /(EasyNetQ.Management.Client.RelativePath parent, string segment) { }
    }
    public class StatsCriteria : System.IEquatable<EasyNetQ.Management.Client.StatsCriteria>
    {
        public readonly System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>? QueryParameters;
        public static EasyNetQ.Management.Client.StatsCriteria Disable;
        public static EasyNetQ.Management.Client.StatsCriteria QueueTotalsOnly;
        public StatsCriteria(bool DisableStats, bool EnableQueueTotals) { }
        public bool DisableStats { get; init; }
        public bool EnableQueueTotals { get; init; }
    }
    [System.Serializable]
    public class UnexpectedHttpStatusCodeException : System.Exception
    {
        public UnexpectedHttpStatusCodeException() { }
        public UnexpectedHttpStatusCodeException(System.Net.Http.HttpResponseMessage response) { }
        public UnexpectedHttpStatusCodeException(string message) { }
        protected UnexpectedHttpStatusCodeException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public UnexpectedHttpStatusCodeException(string message, System.Exception inner) { }
        public System.Net.HttpStatusCode StatusCode { get; }
        public int StatusCodeNumber { get; }
    }
}
namespace EasyNetQ.Management.Client.Model
{
    public enum AckMode
    {
        AckRequeueFalse = 0,
        AckRequeueTrue = 1,
        RejectRequeueFalse = 2,
        RejectRequeueTrue = 3,
    }
    public static class AmqpProtocol
    {
        public const string AMQP091 = "amqp091";
        public const string AMQP10 = "amqp10";
    }
    public class AmqpUri
    {
        public AmqpUri(string hostName) { }
        public AmqpUri(string hostName, int? port) { }
        public AmqpUri(string hostName, int? port, string? username, string? password) { }
        public string HostName { get; set; }
        public string? Password { get; set; }
        public int? Port { get; set; }
        public string? Username { get; set; }
        public override string ToString() { }
    }
    public class Application : System.IEquatable<EasyNetQ.Management.Client.Model.Application>
    {
        public Application(string Name, string Description, string Version) { }
        public string Description { get; init; }
        public string Name { get; init; }
        public string Version { get; init; }
    }
    public enum ApplyMode
    {
        All = 0,
        Queues = 1,
        Exchanges = 2,
    }
    public class AuthMechanism : System.IEquatable<EasyNetQ.Management.Client.Model.AuthMechanism>
    {
        public AuthMechanism(string Name, string Description, bool Enabled) { }
        public string Description { get; init; }
        public bool Enabled { get; init; }
        public string Name { get; init; }
    }
    public class BackingQueueStatus : System.IEquatable<EasyNetQ.Management.Client.Model.BackingQueueStatus>
    {
        public BackingQueueStatus(
                    string? Mode,
                    int Version,
                    int Q1,
                    int Q2,
                    System.Collections.Generic.IReadOnlyList<object?> Delta,
                    int Q3,
                    int Q4,
                    int Len,
                    int PendingAcks,
                    double TargetRamCount,
                    int RamMsgCount,
                    int RamAckCount,
                    long NextSeqId,
                    long NextDeliverSeqId,
                    int PersistentCount,
                    double AvgIngressRate,
                    double AvgEgressRate,
                    double AvgAckIngressRate,
                    double AvgAckEgressRate) { }
        [System.Text.Json.Serialization.JsonIgnore]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?>? ExtensionData { get; set; }
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, System.Text.Json.JsonElement>? JsonExtensionData { get; set; }
        public double AvgAckEgressRate { get; init; }
        public double AvgAckIngressRate { get; init; }
        public double AvgEgressRate { get; init; }
        public double AvgIngressRate { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.ObjectReadOnlyListConverter?))]
        public System.Collections.Generic.IReadOnlyList<object?> Delta { get; init; }
        public int Len { get; init; }
        public string? Mode { get; init; }
        public long NextDeliverSeqId { get; init; }
        public long NextSeqId { get; init; }
        public int PendingAcks { get; init; }
        public int PersistentCount { get; init; }
        public int Q1 { get; init; }
        public int Q2 { get; init; }
        public int Q3 { get; init; }
        public int Q4 { get; init; }
        public int RamAckCount { get; init; }
        public int RamMsgCount { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.DoubleNamedFloatingPointLiteralsConverter?))]
        public double TargetRamCount { get; init; }
        public int Version { get; init; }
    }
    public class Binding : System.IEquatable<EasyNetQ.Management.Client.Model.Binding>
    {
        public Binding(string Source, string Vhost, string Destination, string DestinationType, string RoutingKey, System.Collections.Generic.IReadOnlyDictionary<string, object?>? Arguments, string? PropertiesKey) { }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.StringObjectReadOnlyDictionaryConverter))]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?>? Arguments { get; init; }
        public string DestinationType { get; init; }
        public string Destination { get; init; }
        public string? PropertiesKey { get; init; }
        public string RoutingKey { get; init; }
        public string Source { get; init; }
        public string Vhost { get; init; }
    }
    public class BindingInfo : System.IEquatable<EasyNetQ.Management.Client.Model.BindingInfo>
    {
        public BindingInfo(string RoutingKey, System.Collections.Generic.IReadOnlyDictionary<string, object?>? Arguments = null) { }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.StringObjectReadOnlyDictionaryConverter))]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?>? Arguments { get; init; }
        public string RoutingKey { get; init; }
    }
    public class Channel : System.IEquatable<EasyNetQ.Management.Client.Model.Channel>
    {
        public Channel(
                    System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.ConsumerDetail>? ConsumerDetails,
                    EasyNetQ.Management.Client.Model.ConnectionDetails? ConnectionDetails,
                    EasyNetQ.Management.Client.Model.MessageStats? MessageStats,
                    string? IdleSince,
                    bool Transactional,
                    bool Confirm,
                    int ConsumerCount,
                    int MessagesUnacknowledged,
                    int MessagesUnconfirmed,
                    int MessagesUncommitted,
                    int AcksUncommitted,
                    int PrefetchCount,
                    bool ClientFlowBlocked,
                    string Node,
                    string Name,
                    int Number,
                    string User,
                    string Vhost) { }
        public int AcksUncommitted { get; init; }
        public bool ClientFlowBlocked { get; init; }
        public bool Confirm { get; init; }
        public EasyNetQ.Management.Client.Model.ConnectionDetails? ConnectionDetails { get; init; }
        public int ConsumerCount { get; init; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.ConsumerDetail>? ConsumerDetails { get; init; }
        public string? IdleSince { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.EmptyArrayAsDefaultConverter<EasyNetQ.Management.Client.Model.MessageStats>))]
        public EasyNetQ.Management.Client.Model.MessageStats? MessageStats { get; init; }
        public int MessagesUnacknowledged { get; init; }
        public int MessagesUncommitted { get; init; }
        public int MessagesUnconfirmed { get; init; }
        public string Name { get; init; }
        public string Node { get; init; }
        public int Number { get; init; }
        public int PrefetchCount { get; init; }
        public bool Transactional { get; init; }
        public string User { get; init; }
        public string Vhost { get; init; }
    }
    public class ChannelDetail : System.IEquatable<EasyNetQ.Management.Client.Model.ChannelDetail>
    {
        public ChannelDetail(string Name, int Number, string User, string ConnectionName, int PeerPort, string PeerHost, string? Node) { }
        public string ConnectionName { get; init; }
        public string Name { get; init; }
        public string? Node { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.TolerantInt32Converter))]
        public int Number { get; init; }
        public string PeerHost { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.TolerantInt32Converter))]
        public int PeerPort { get; init; }
        public string User { get; init; }
    }
    public class Connection : System.IEquatable<EasyNetQ.Management.Client.Model.Connection>
    {
        public Connection(
                    long RecvOct,
                    long RecvCnt,
                    long SendOct,
                    long SendCnt,
                    long SendPend,
                    string? State,
                    string? LastBlockedBy,
                    string? LastBlockedAge,
                    long Channels,
                    string Type,
                    string Node,
                    string Name,
                    string? Address,
                    int Port,
                    string? PeerHost,
                    int PeerPort,
                    bool Ssl,
                    string? PeerCertSubject,
                    string? PeerCertIssuer,
                    string? PeerCertValidity,
                    string? AuthMechanism,
                    string? SslProtocol,
                    string? SslKeyExchange,
                    string? SslCipher,
                    string? SslHash,
                    string Protocol,
                    string User,
                    string Vhost,
                    long Timeout,
                    long FrameMax,
                    System.Collections.Generic.IReadOnlyDictionary<string, object?> ClientProperties) { }
        public string? Address { get; init; }
        public string? AuthMechanism { get; init; }
        public long Channels { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.StringObjectReadOnlyDictionaryConverter?))]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?> ClientProperties { get; init; }
        public long FrameMax { get; init; }
        public string? LastBlockedAge { get; init; }
        public string? LastBlockedBy { get; init; }
        public string Name { get; init; }
        public string Node { get; init; }
        public string? PeerCertIssuer { get; init; }
        public string? PeerCertSubject { get; init; }
        public string? PeerCertValidity { get; init; }
        public string? PeerHost { get; init; }
        public int PeerPort { get; init; }
        public int Port { get; init; }
        public string Protocol { get; init; }
        public long RecvCnt { get; init; }
        public long RecvOct { get; init; }
        public long SendCnt { get; init; }
        public long SendOct { get; init; }
        public long SendPend { get; init; }
        public string? SslCipher { get; init; }
        public string? SslHash { get; init; }
        public string? SslKeyExchange { get; init; }
        public string? SslProtocol { get; init; }
        public bool Ssl { get; init; }
        public string? State { get; init; }
        public long Timeout { get; init; }
        public string Type { get; init; }
        public string User { get; init; }
        public string Vhost { get; init; }
    }
    public class ConnectionDetails : System.IEquatable<EasyNetQ.Management.Client.Model.ConnectionDetails>
    {
        public ConnectionDetails(string Name, string PeerHost, int PeerPort) { }
        public string Name { get; init; }
        public string PeerHost { get; init; }
        public int PeerPort { get; init; }
    }
    public class Consumer : System.IEquatable<EasyNetQ.Management.Client.Model.Consumer>
    {
        public Consumer(System.Collections.Generic.IReadOnlyDictionary<string, object?> Arguments, bool AckRequired, bool Active, string ActivityStatus, EasyNetQ.Management.Client.Model.ChannelDetail? ChannelDetails, string ConsumerTag, bool Exclusive, int PrefetchCount, EasyNetQ.Management.Client.Model.QueueName Queue) { }
        public bool AckRequired { get; init; }
        public bool Active { get; init; }
        public string ActivityStatus { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.StringObjectReadOnlyDictionaryConverter))]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?> Arguments { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.EmptyArrayAsDefaultConverter<EasyNetQ.Management.Client.Model.ChannelDetail>))]
        public EasyNetQ.Management.Client.Model.ChannelDetail? ChannelDetails { get; init; }
        public string ConsumerTag { get; init; }
        public bool Exclusive { get; init; }
        public int PrefetchCount { get; init; }
        public EasyNetQ.Management.Client.Model.QueueName Queue { get; init; }
    }
    public class ConsumerArguments : System.IEquatable<EasyNetQ.Management.Client.Model.ConsumerArguments>
    {
        public ConsumerArguments(EasyNetQ.Management.Client.Model.CreditArgument? Credit) { }
        [System.Text.Json.Serialization.JsonPropertyName("x-credit")]
        public EasyNetQ.Management.Client.Model.CreditArgument? Credit { get; init; }
    }
    public class ConsumerDetail : System.IEquatable<EasyNetQ.Management.Client.Model.ConsumerDetail>
    {
        public ConsumerDetail(EasyNetQ.Management.Client.Model.QueueName Queue, string ConsumerTag, bool Exclusive, bool AckRequired, EasyNetQ.Management.Client.Model.ConsumerArguments? Arguments, EasyNetQ.Management.Client.Model.ChannelDetail? ChannelDetails) { }
        public bool AckRequired { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.EmptyArrayAsDefaultConverter<EasyNetQ.Management.Client.Model.ConsumerArguments>))]
        public EasyNetQ.Management.Client.Model.ConsumerArguments? Arguments { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.EmptyArrayAsDefaultConverter<EasyNetQ.Management.Client.Model.ChannelDetail>))]
        public EasyNetQ.Management.Client.Model.ChannelDetail? ChannelDetails { get; init; }
        public string ConsumerTag { get; init; }
        public bool Exclusive { get; init; }
        public EasyNetQ.Management.Client.Model.QueueName Queue { get; init; }
    }
    public class Context : System.IEquatable<EasyNetQ.Management.Client.Model.Context>
    {
        public Context(string Node, string Description, string Path, int Port) { }
        public string Description { get; init; }
        public string Node { get; init; }
        public string Path { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.TolerantInt32Converter))]
        public int Port { get; init; }
    }
    public class CreditArgument : System.IEquatable<EasyNetQ.Management.Client.Model.CreditArgument>
    {
        public CreditArgument(int Credit, bool Drain) { }
        public int Credit { get; init; }
        public bool Drain { get; init; }
    }
    public enum DeadLetterStrategy
    {
        [System.Runtime.Serialization.EnumMember(Value="at-most-once")]
        AtMostOnce = 0,
        [System.Runtime.Serialization.EnumMember(Value="at-least-once")]
        AtLeastOnce = 1,
    }
    public class Definitions : System.IEquatable<EasyNetQ.Management.Client.Model.Definitions>
    {
        public Definitions(string RabbitVersion, string RabbitmqVersion, string ProductName, string ProductVersion, System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.User> Users, System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Vhost> Vhosts, System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Permission> Permissions, System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.TopicPermission> TopicPermissions, System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Parameter> Parameters, System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.GlobalParameter> GlobalParameters, System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Policy> Policies, System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Queue> Queues, System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Exchange> Exchanges, System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> Bindings) { }
        [System.Text.Json.Serialization.JsonIgnore]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?>? ExtensionData { get; set; }
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, System.Text.Json.JsonElement>? JsonExtensionData { get; set; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Binding> Bindings { get; init; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Exchange> Exchanges { get; init; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.GlobalParameter> GlobalParameters { get; init; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Parameter> Parameters { get; init; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Permission> Permissions { get; init; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Policy> Policies { get; init; }
        public string ProductName { get; init; }
        public string ProductVersion { get; init; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Queue> Queues { get; init; }
        public string RabbitVersion { get; init; }
        public string RabbitmqVersion { get; init; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.TopicPermission> TopicPermissions { get; init; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.User> Users { get; init; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Vhost> Vhosts { get; init; }
    }
    public class Exchange : EasyNetQ.Management.Client.Model.ExchangeName, System.IEquatable<EasyNetQ.Management.Client.Model.Exchange>
    {
        public Exchange(string Name, string Vhost, string Type, bool Durable = true, bool AutoDelete = false, bool Internal = false, System.Collections.Generic.IReadOnlyDictionary<string, object>? Arguments = null, string? UserWhoPerformedAction = null, EasyNetQ.Management.Client.Model.MessageStats? MessageStats = null) { }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.StringObjectReadOnlyDictionaryConverter?))]
        public System.Collections.Generic.IReadOnlyDictionary<string, object>? Arguments { get; init; }
        public bool AutoDelete { get; init; }
        public bool Durable { get; init; }
        public bool Internal { get; init; }
        public EasyNetQ.Management.Client.Model.MessageStats? MessageStats { get; init; }
        public string Type { get; init; }
        public string? UserWhoPerformedAction { get; init; }
    }
    public class ExchangeInfo : System.IEquatable<EasyNetQ.Management.Client.Model.ExchangeInfo>
    {
        public ExchangeInfo(string Type, bool AutoDelete = false, bool Durable = true, bool Internal = false, System.Collections.Generic.IReadOnlyDictionary<string, object?>? Arguments = null) { }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.StringObjectReadOnlyDictionaryConverter))]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?>? Arguments { get; init; }
        public bool AutoDelete { get; init; }
        public bool Durable { get; init; }
        public bool Internal { get; init; }
        public string Type { get; init; }
    }
    public class ExchangeName : System.IEquatable<EasyNetQ.Management.Client.Model.ExchangeName>
    {
        public ExchangeName(string Name, string Vhost) { }
        public string Name { get; init; }
        public string Vhost { get; init; }
    }
    public class ExchangeTypeSpec : System.IEquatable<EasyNetQ.Management.Client.Model.ExchangeTypeSpec>
    {
        public ExchangeTypeSpec(string Name, string Description, bool Enabled) { }
        public string Description { get; init; }
        public bool Enabled { get; init; }
        public string Name { get; init; }
    }
    public class Federation : System.IEquatable<EasyNetQ.Management.Client.Model.Federation>
    {
        public Federation(string Node, string Exchange, string UpstreamExchange, string Type, string Vhost, string Upstream, string Id, EasyNetQ.Management.Client.Model.FederationStatus Status, string LocalConnection, string Uri, string Timestamp) { }
        public string Exchange { get; init; }
        public string Id { get; init; }
        public string LocalConnection { get; init; }
        public string Node { get; init; }
        public EasyNetQ.Management.Client.Model.FederationStatus Status { get; init; }
        public string Timestamp { get; init; }
        public string Type { get; init; }
        public string UpstreamExchange { get; init; }
        public string Upstream { get; init; }
        public string Uri { get; init; }
        public string Vhost { get; init; }
    }
    public enum FederationStatus
    {
        Running = 0,
    }
    public class GetMessagesFromQueueInfo : System.IEquatable<EasyNetQ.Management.Client.Model.GetMessagesFromQueueInfo>
    {
        public GetMessagesFromQueueInfo(long Count, EasyNetQ.Management.Client.Model.AckMode Ackmode, string Encoding = "auto") { }
        public EasyNetQ.Management.Client.Model.AckMode Ackmode { get; init; }
        public long Count { get; init; }
        public string Encoding { get; init; }
    }
    public class GlobalParameter : System.IEquatable<EasyNetQ.Management.Client.Model.GlobalParameter>
    {
        public GlobalParameter(string Name, object Value) { }
        public string Name { get; init; }
        public object Value { get; init; }
    }
    public enum HaMode
    {
        All = 0,
        Exactly = 1,
        Nodes = 2,
    }
    public class HaParams : System.IEquatable<EasyNetQ.Management.Client.Model.HaParams>
    {
        public HaParams(EasyNetQ.Management.Client.Model.HaMode AssociatedHaMode, long? ExactlyCount = default, System.Collections.Generic.IReadOnlyList<string>? Nodes = null) { }
        public EasyNetQ.Management.Client.Model.HaMode AssociatedHaMode { get; init; }
        public long? ExactlyCount { get; init; }
        public System.Collections.Generic.IReadOnlyList<string>? Nodes { get; init; }
    }
    public enum HaPromote
    {
        [System.Runtime.Serialization.EnumMember(Value="when-synced")]
        WhenSynced = 0,
        [System.Runtime.Serialization.EnumMember(Value="always")]
        Always = 1,
    }
    public enum HaSyncMode
    {
        Manual = 0,
        Automatic = 1,
    }
    public class LengthsDetails : System.IEquatable<EasyNetQ.Management.Client.Model.LengthsDetails>
    {
        public LengthsDetails(double Rate, double AvgRate, double Avg, System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.LengthsSample>? Samples = null) { }
        public double AvgRate { get; init; }
        public double Avg { get; init; }
        public double Rate { get; init; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.LengthsSample>? Samples { get; init; }
    }
    public class LengthsSample : System.IEquatable<EasyNetQ.Management.Client.Model.LengthsSample>
    {
        public LengthsSample(long Sample, System.DateTime Timestamp) { }
        public long Sample { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.UnixMsDateTimeConverter))]
        public System.DateTime Timestamp { get; init; }
    }
    public class Listener : System.IEquatable<EasyNetQ.Management.Client.Model.Listener>
    {
        public Listener(string Node, string Protocol, string IpAddress, int Port, EasyNetQ.Management.Client.Model.SocketOpts? SocketOpts = null) { }
        [System.Text.Json.Serialization.JsonIgnore]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?>? ExtensionData { get; set; }
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, System.Text.Json.JsonElement>? JsonExtensionData { get; set; }
        public string IpAddress { get; init; }
        public string Node { get; init; }
        public int Port { get; init; }
        public string Protocol { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.EmptyArrayAsDefaultConverter<EasyNetQ.Management.Client.Model.SocketOpts>))]
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        public EasyNetQ.Management.Client.Model.SocketOpts? SocketOpts { get; init; }
    }
    public class Message : System.IEquatable<EasyNetQ.Management.Client.Model.Message>
    {
        public Message(int PayloadBytes, bool Redelivered, string Exchange, string RoutingKey, int MessageCount, System.Collections.Generic.IReadOnlyDictionary<string, object?> Properties, string Payload, string PayloadEncoding) { }
        public string Exchange { get; init; }
        public int MessageCount { get; init; }
        public int PayloadBytes { get; init; }
        public string PayloadEncoding { get; init; }
        public string Payload { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.StringObjectReadOnlyDictionaryConverter))]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?> Properties { get; init; }
        public bool Redelivered { get; init; }
        public string RoutingKey { get; init; }
    }
    public class MessageRateDetails : System.IEquatable<EasyNetQ.Management.Client.Model.MessageRateDetails>
    {
        public MessageRateDetails(double Rate, double AvgRate, double Avg, System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.MessageRateSample>? Samples) { }
        public double AvgRate { get; init; }
        public double Avg { get; init; }
        public double Rate { get; init; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.MessageRateSample>? Samples { get; init; }
    }
    public class MessageRateSample : System.IEquatable<EasyNetQ.Management.Client.Model.MessageRateSample>
    {
        public MessageRateSample(long Sample, System.DateTime Timestamp) { }
        public long Sample { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.UnixMsDateTimeConverter))]
        public System.DateTime Timestamp { get; init; }
    }
    public class MessageStats : System.IEquatable<EasyNetQ.Management.Client.Model.MessageStats>
    {
        public MessageStats(
                    long Ack = 0,
                    EasyNetQ.Management.Client.Model.MessageRateDetails? AckDetails = null,
                    long DeliverGet = 0,
                    EasyNetQ.Management.Client.Model.MessageRateDetails? DeliverGetDetails = null,
                    long DeliverNoAck = 0,
                    EasyNetQ.Management.Client.Model.MessageRateDetails? DeliverNoAckDetails = null,
                    long Publish = 0,
                    EasyNetQ.Management.Client.Model.MessageRateDetails? PublishDetails = null,
                    long PublishIn = 0,
                    EasyNetQ.Management.Client.Model.MessageRateDetails? PublishInDetails = null,
                    long PublishOut = 0,
                    EasyNetQ.Management.Client.Model.MessageRateDetails? PublishOutDetails = null,
                    long Redeliver = 0,
                    EasyNetQ.Management.Client.Model.MessageRateDetails? RedeliverDetails = null,
                    long Return = 0,
                    EasyNetQ.Management.Client.Model.MessageRateDetails? ReturnDetails = null,
                    long Get = 0,
                    EasyNetQ.Management.Client.Model.MessageRateDetails? GetDetails = null,
                    long GetNoAck = 0,
                    EasyNetQ.Management.Client.Model.MessageRateDetails? GetNoAckDetails = null,
                    long Deliver = 0,
                    EasyNetQ.Management.Client.Model.MessageRateDetails? DeliverDetails = null,
                    long Confirm = 0,
                    EasyNetQ.Management.Client.Model.MessageRateDetails? ConfirmDetails = null) { }
        public EasyNetQ.Management.Client.Model.MessageRateDetails? AckDetails { get; init; }
        public long Ack { get; init; }
        public EasyNetQ.Management.Client.Model.MessageRateDetails? ConfirmDetails { get; init; }
        public long Confirm { get; init; }
        public EasyNetQ.Management.Client.Model.MessageRateDetails? DeliverDetails { get; init; }
        public EasyNetQ.Management.Client.Model.MessageRateDetails? DeliverGetDetails { get; init; }
        public long DeliverGet { get; init; }
        public EasyNetQ.Management.Client.Model.MessageRateDetails? DeliverNoAckDetails { get; init; }
        public long DeliverNoAck { get; init; }
        public long Deliver { get; init; }
        public EasyNetQ.Management.Client.Model.MessageRateDetails? GetDetails { get; init; }
        public EasyNetQ.Management.Client.Model.MessageRateDetails? GetNoAckDetails { get; init; }
        public long GetNoAck { get; init; }
        public long Get { get; init; }
        public EasyNetQ.Management.Client.Model.MessageRateDetails? PublishDetails { get; init; }
        public EasyNetQ.Management.Client.Model.MessageRateDetails? PublishInDetails { get; init; }
        public long PublishIn { get; init; }
        public EasyNetQ.Management.Client.Model.MessageRateDetails? PublishOutDetails { get; init; }
        public long PublishOut { get; init; }
        public long Publish { get; init; }
        public EasyNetQ.Management.Client.Model.MessageRateDetails? RedeliverDetails { get; init; }
        public long Redeliver { get; init; }
        public EasyNetQ.Management.Client.Model.MessageRateDetails? ReturnDetails { get; init; }
        public long Return { get; init; }
    }
    public class Node : System.IEquatable<EasyNetQ.Management.Client.Model.Node>
    {
        public Node(
                    string Name,
                    string Type,
                    bool Running,
                    string? OsPid,
                    long MemEts,
                    long MemBinary,
                    long MemProc,
                    long MemProcUsed,
                    long MemAtom,
                    long MemAtomUsed,
                    long MemCode,
                    long FdUsed,
                    long FdTotal,
                    long SocketsUsed,
                    long SocketsTotal,
                    long MemUsed,
                    long MemLimit,
                    bool MemAlarm,
                    long DiskFreeLimit,
                    long DiskFree,
                    bool DiskFreeAlarm,
                    long ProcUsed,
                    long ProcTotal,
                    long Uptime,
                    long RunQueue,
                    long Processors,
                    System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.ExchangeTypeSpec>? ExchangeTypes,
                    System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.AuthMechanism>? AuthMechanisms,
                    System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Application>? Applications,
                    System.Collections.Generic.IReadOnlyList<string>? Partitions) { }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Application>? Applications { get; init; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.AuthMechanism>? AuthMechanisms { get; init; }
        public bool DiskFreeAlarm { get; init; }
        public long DiskFreeLimit { get; init; }
        public long DiskFree { get; init; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.ExchangeTypeSpec>? ExchangeTypes { get; init; }
        public long FdTotal { get; init; }
        public long FdUsed { get; init; }
        public bool MemAlarm { get; init; }
        public long MemAtomUsed { get; init; }
        public long MemAtom { get; init; }
        public long MemBinary { get; init; }
        public long MemCode { get; init; }
        public long MemEts { get; init; }
        public long MemLimit { get; init; }
        public long MemProcUsed { get; init; }
        public long MemProc { get; init; }
        public long MemUsed { get; init; }
        public string Name { get; init; }
        public string? OsPid { get; init; }
        public System.Collections.Generic.IReadOnlyList<string>? Partitions { get; init; }
        public long ProcTotal { get; init; }
        public long ProcUsed { get; init; }
        public long Processors { get; init; }
        public long RunQueue { get; init; }
        public bool Running { get; init; }
        public long SocketsTotal { get; init; }
        public long SocketsUsed { get; init; }
        public string Type { get; init; }
        public long Uptime { get; init; }
    }
    public class ObjectTotals : System.IEquatable<EasyNetQ.Management.Client.Model.ObjectTotals>
    {
        public ObjectTotals(int Consumers, int Queues, int Exchanges, int Connections, int Channels) { }
        public int Channels { get; init; }
        public int Connections { get; init; }
        public int Consumers { get; init; }
        public int Exchanges { get; init; }
        public int Queues { get; init; }
    }
    public enum Overflow
    {
        [System.Runtime.Serialization.EnumMember(Value="drop-head")]
        DropHead = 0,
        [System.Runtime.Serialization.EnumMember(Value="reject-publish")]
        RejectPublish = 1,
        [System.Runtime.Serialization.EnumMember(Value="reject-publish-dlx")]
        RejectPublishDlx = 2,
    }
    public class Overview : System.IEquatable<EasyNetQ.Management.Client.Model.Overview>
    {
        public Overview(string ManagementVersion, System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.ExchangeTypeSpec> ExchangeTypes, string RabbitmqVersion, string ErlangVersion, EasyNetQ.Management.Client.Model.MessageStats MessageStats, EasyNetQ.Management.Client.Model.QueueTotals QueueTotals, EasyNetQ.Management.Client.Model.ObjectTotals ObjectTotals, string Node, System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Listener> Listeners, System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Context> Contexts) { }
        [System.Text.Json.Serialization.JsonIgnore]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?>? ExtensionData { get; set; }
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, System.Text.Json.JsonElement>? JsonExtensionData { get; set; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Context> Contexts { get; init; }
        public string ErlangVersion { get; init; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.ExchangeTypeSpec> ExchangeTypes { get; init; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.Listener> Listeners { get; init; }
        public string ManagementVersion { get; init; }
        public EasyNetQ.Management.Client.Model.MessageStats MessageStats { get; init; }
        public string Node { get; init; }
        public EasyNetQ.Management.Client.Model.ObjectTotals ObjectTotals { get; init; }
        public EasyNetQ.Management.Client.Model.QueueTotals QueueTotals { get; init; }
        public string RabbitmqVersion { get; init; }
    }
    public class PageResult<T> : System.IEquatable<EasyNetQ.Management.Client.Model.PageResult<T>>
    {
        public PageResult(int FilteredCount, int ItemCount, System.Collections.Generic.IReadOnlyList<T> Items, int Page, int PageCount, int PageSize, int TotalCount) { }
        public int FilteredCount { get; init; }
        public int ItemCount { get; init; }
        public System.Collections.Generic.IReadOnlyList<T> Items { get; init; }
        public int PageCount { get; init; }
        public int PageSize { get; init; }
        public int Page { get; init; }
        public int TotalCount { get; init; }
    }
    public class Parameter : System.IEquatable<EasyNetQ.Management.Client.Model.Parameter>
    {
        public Parameter(string Vhost, string Component, string Name, object Value) { }
        public string Component { get; init; }
        public string Name { get; init; }
        public object Value { get; init; }
        public string Vhost { get; init; }
    }
    public class ParameterFederationValue : System.IEquatable<EasyNetQ.Management.Client.Model.ParameterFederationValue>
    {
        public ParameterFederationValue(EasyNetQ.Management.Client.Model.AmqpUri Uri, int Expires) { }
        public int Expires { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.ObjectToStringConverter<EasyNetQ.Management.Client.Model.AmqpUri>))]
        public EasyNetQ.Management.Client.Model.AmqpUri Uri { get; init; }
    }
    public class ParameterShovelValue : System.IEquatable<EasyNetQ.Management.Client.Model.ParameterShovelValue>
    {
        public ParameterShovelValue(
                    string SrcUri,
                    string DestUri,
                    string? SrcProtocol = null,
                    string? SrcQueue = null,
                    System.Collections.Generic.IReadOnlyDictionary<string, object?>? SrcQueueArguments = null,
                    string? SrcExchange = null,
                    string? SrcExchangeKey = null,
                    string? SrcDeleteAfter = null,
                    int? SrcPrefetchCount = default,
                    string? DestProtocol = null,
                    string? DestQueue = null,
                    System.Collections.Generic.IReadOnlyDictionary<string, object?>? DestQueueArguments = null,
                    string? DestExchange = null,
                    string? DestExchangeKey = null,
                    bool? DestAddForwardHeaders = default,
                    bool? DestAddTimestampHeader = default,
                    string? AckMode = null,
                    int? ReconnectDelay = default) { }
        [System.Text.Json.Serialization.JsonIgnore]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?>? ExtensionData { get; set; }
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, System.Text.Json.JsonElement>? JsonExtensionData { get; set; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("ack-mode")]
        public string? AckMode { get; init; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("dest-add-forward-headers")]
        public bool? DestAddForwardHeaders { get; init; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("dest-add-timestamp-header")]
        public bool? DestAddTimestampHeader { get; init; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("dest-exchange-key")]
        public string? DestExchangeKey { get; init; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("dest-exchange")]
        public string? DestExchange { get; init; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("dest-protocol")]
        public string? DestProtocol { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.StringObjectReadOnlyDictionaryConverter?))]
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("dest-queue-args")]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?>? DestQueueArguments { get; init; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("dest-queue")]
        public string? DestQueue { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("dest-uri")]
        public string DestUri { get; init; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("reconnect-delay")]
        public int? ReconnectDelay { get; init; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("src-delete-after")]
        public string? SrcDeleteAfter { get; init; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("src-exchange-key")]
        public string? SrcExchangeKey { get; init; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("src-exchange")]
        public string? SrcExchange { get; init; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("src-prefetch-count")]
        public int? SrcPrefetchCount { get; init; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("src-protocol")]
        public string? SrcProtocol { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.StringObjectReadOnlyDictionaryConverter?))]
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("src-queue-args")]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?>? SrcQueueArguments { get; init; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("src-queue")]
        public string? SrcQueue { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("src-uri")]
        public string SrcUri { get; init; }
    }
    public enum PayloadEncoding
    {
        String = 0,
        Base64 = 1,
    }
    public class Permission : System.IEquatable<EasyNetQ.Management.Client.Model.Permission>
    {
        public Permission(string User, string Vhost, string Configure, string Write, string Read) { }
        public string Configure { get; init; }
        public string Read { get; init; }
        public string User { get; init; }
        public string Vhost { get; init; }
        public string Write { get; init; }
    }
    public class PermissionInfo : System.IEquatable<EasyNetQ.Management.Client.Model.PermissionInfo>
    {
        public PermissionInfo(string Configure = ".*", string Write = ".*", string Read = ".*") { }
        public string Configure { get; init; }
        public string Read { get; init; }
        public string Write { get; init; }
        public EasyNetQ.Management.Client.Model.PermissionInfo DenyAllConfigure() { }
        public EasyNetQ.Management.Client.Model.PermissionInfo DenyAllRead() { }
        public EasyNetQ.Management.Client.Model.PermissionInfo DenyAllWrite() { }
        public EasyNetQ.Management.Client.Model.PermissionInfo SetConfigure(string resourcesToAllow) { }
        public EasyNetQ.Management.Client.Model.PermissionInfo SetRead(string resourcesToAllow) { }
        public EasyNetQ.Management.Client.Model.PermissionInfo SetWrite(string resourcesToAllow) { }
    }
    public class Policy : System.IEquatable<EasyNetQ.Management.Client.Model.Policy>
    {
        public Policy(string Name, string Pattern, EasyNetQ.Management.Client.Model.PolicyDefinition Definition, string Vhost = "/", EasyNetQ.Management.Client.Model.ApplyMode ApplyTo = 0, int Priority = 0) { }
        [System.Text.Json.Serialization.JsonPropertyName("apply-to")]
        public EasyNetQ.Management.Client.Model.ApplyMode ApplyTo { get; init; }
        public EasyNetQ.Management.Client.Model.PolicyDefinition Definition { get; init; }
        public string Name { get; init; }
        public string Pattern { get; init; }
        public int Priority { get; init; }
        public string Vhost { get; init; }
    }
    public class PolicyDefinition : System.IEquatable<EasyNetQ.Management.Client.Model.PolicyDefinition>
    {
        public PolicyDefinition(
                    uint? MaxLength = default,
                    long? MaxLengthBytes = default,
                    EasyNetQ.Management.Client.Model.Overflow? Overflow = default,
                    uint? Expires = default,
                    string? DeadLetterExchange = null,
                    string? DeadLetterRoutingKey = null,
                    uint? MessageTtl = default,
                    uint? ConsumerTimeout = default,
                    EasyNetQ.Management.Client.Model.HaMode? HaMode = default,
                    EasyNetQ.Management.Client.Model.HaParams? HaParams = null,
                    EasyNetQ.Management.Client.Model.HaSyncMode? HaSyncMode = default,
                    int? HaSyncBatchSize = default,
                    EasyNetQ.Management.Client.Model.HaPromote? HaPromoteOnShutdown = default,
                    EasyNetQ.Management.Client.Model.HaPromote? HaPromoteOnFailure = default,
                    EasyNetQ.Management.Client.Model.QueueVersion? QueueVersion = default,
                    EasyNetQ.Management.Client.Model.QueueLocator? QueueMasterLocator = default,
                    uint? DeliveryLimit = default,
                    EasyNetQ.Management.Client.Model.DeadLetterStrategy? DeadLetterStrategy = default,
                    EasyNetQ.Management.Client.Model.QueueLocator? QueueLeaderLocator = default,
                    string? MaxAge = null,
                    uint? StreamMaxSegmentSizeBytes = default,
                    string? AlternateExchange = null,
                    string? FederationUpstream = null,
                    string? FederationUpstreamSet = null,
                    string? QueueMode = null) { }
        [System.Text.Json.Serialization.JsonIgnore]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?>? ExtensionData { get; set; }
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, System.Text.Json.JsonElement>? JsonExtensionData { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("alternate-exchange")]
        public string? AlternateExchange { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("consumer-timeout")]
        public uint? ConsumerTimeout { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("dead-letter-exchange")]
        public string? DeadLetterExchange { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("dead-letter-routing-key")]
        public string? DeadLetterRoutingKey { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.JsonStringEnumConverterEx<EasyNetQ.Management.Client.Model.DeadLetterStrategy>?))]
        [System.Text.Json.Serialization.JsonPropertyName("dead-letter-strategy")]
        public EasyNetQ.Management.Client.Model.DeadLetterStrategy? DeadLetterStrategy { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("delivery-limit")]
        public uint? DeliveryLimit { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("expires")]
        public uint? Expires { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("federation-upstream-set")]
        public string? FederationUpstreamSet { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("federation-upstream")]
        public string? FederationUpstream { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("ha-mode")]
        public EasyNetQ.Management.Client.Model.HaMode? HaMode { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("ha-params")]
        public EasyNetQ.Management.Client.Model.HaParams? HaParams { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.JsonStringEnumConverterEx<EasyNetQ.Management.Client.Model.HaPromote>?))]
        [System.Text.Json.Serialization.JsonPropertyName("ha-promote-on-failure")]
        public EasyNetQ.Management.Client.Model.HaPromote? HaPromoteOnFailure { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.JsonStringEnumConverterEx<EasyNetQ.Management.Client.Model.HaPromote>?))]
        [System.Text.Json.Serialization.JsonPropertyName("ha-promote-on-shutdown")]
        public EasyNetQ.Management.Client.Model.HaPromote? HaPromoteOnShutdown { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("ha-sync-batch-size")]
        public int? HaSyncBatchSize { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("ha-sync-mode")]
        public EasyNetQ.Management.Client.Model.HaSyncMode? HaSyncMode { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("max-age")]
        public string? MaxAge { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("max-length-bytes")]
        public long? MaxLengthBytes { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("max-length")]
        public uint? MaxLength { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("message-ttl")]
        public uint? MessageTtl { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.JsonStringEnumConverterEx<EasyNetQ.Management.Client.Model.Overflow>?))]
        [System.Text.Json.Serialization.JsonPropertyName("overflow")]
        public EasyNetQ.Management.Client.Model.Overflow? Overflow { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.JsonStringEnumConverterEx<EasyNetQ.Management.Client.Model.QueueLocator>?))]
        [System.Text.Json.Serialization.JsonPropertyName("queue-leader-locator")]
        public EasyNetQ.Management.Client.Model.QueueLocator? QueueLeaderLocator { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.JsonStringEnumConverterEx<EasyNetQ.Management.Client.Model.QueueLocator>?))]
        [System.Text.Json.Serialization.JsonPropertyName("queue-master-locator")]
        public EasyNetQ.Management.Client.Model.QueueLocator? QueueMasterLocator { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("queue-mode")]
        public string? QueueMode { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonNumberEnumConverter<EasyNetQ.Management.Client.Model.QueueVersion>?))]
        [System.Text.Json.Serialization.JsonPropertyName("queue-version")]
        public EasyNetQ.Management.Client.Model.QueueVersion? QueueVersion { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("stream-max-segment-size-bytes")]
        public uint? StreamMaxSegmentSizeBytes { get; init; }
    }
    public class PolicyInfo : System.IEquatable<EasyNetQ.Management.Client.Model.PolicyInfo>
    {
        public PolicyInfo(string Pattern, EasyNetQ.Management.Client.Model.PolicyDefinition Definition, EasyNetQ.Management.Client.Model.ApplyMode ApplyTo, int Priority) { }
        [System.Text.Json.Serialization.JsonPropertyName("apply-to")]
        public EasyNetQ.Management.Client.Model.ApplyMode ApplyTo { get; init; }
        public EasyNetQ.Management.Client.Model.PolicyDefinition Definition { get; init; }
        public string Pattern { get; init; }
        public int Priority { get; init; }
    }
    public class PublishInfo : System.IEquatable<EasyNetQ.Management.Client.Model.PublishInfo>
    {
        public PublishInfo(string RoutingKey, string Payload, EasyNetQ.Management.Client.Model.PayloadEncoding PayloadEncoding = 0, System.Collections.Generic.IReadOnlyDictionary<string, object?>? Properties = null) { }
        public EasyNetQ.Management.Client.Model.PayloadEncoding PayloadEncoding { get; init; }
        public string Payload { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.StringObjectReadOnlyDictionaryConverter))]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?> Properties { get; init; }
        public string RoutingKey { get; init; }
    }
    public class PublishResult : System.IEquatable<EasyNetQ.Management.Client.Model.PublishResult>
    {
        public PublishResult(bool Routed) { }
        public bool Routed { get; init; }
    }
    public class Queue : EasyNetQ.Management.Client.Model.QueueName, System.IEquatable<EasyNetQ.Management.Client.Model.Queue>
    {
        public Queue(
                    string Name,
                    string Vhost,
                    EasyNetQ.Management.Client.Model.QueueType Type,
                    string? Node,
                    string? State,
                    System.Collections.Generic.IReadOnlyDictionary<string, object?> Arguments,
                    bool Durable,
                    bool Exclusive,
                    bool AutoDelete,
                    long MessagesReady,
                    long MessagesUnacknowledged,
                    long Messages,
                    long Memory,
                    string? IdleSince,
                    string? Policy,
                    string? ExclusiveConsumerTag,
                    long MessageBytes,
                    long Consumers,
                    long ActiveConsumers,
                    EasyNetQ.Management.Client.Model.BackingQueueStatus? BackingQueueStatus,
                    System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.ConsumerDetail>? ConsumerDetails,
                    long? HeadMessageTimestamp,
                    System.Collections.Generic.IReadOnlyList<string>? SlaveNodes,
                    System.Collections.Generic.IReadOnlyList<string>? SynchronisedSlaveNodes,
                    EasyNetQ.Management.Client.Model.LengthsDetails? MessagesDetails,
                    EasyNetQ.Management.Client.Model.LengthsDetails? MessagesReadyDetails,
                    EasyNetQ.Management.Client.Model.LengthsDetails? MessagesUnacknowledgedDetails,
                    EasyNetQ.Management.Client.Model.MessageStats? MessageStats) { }
        [System.Text.Json.Serialization.JsonIgnore]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?>? ExtensionData { get; set; }
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, System.Text.Json.JsonElement>? JsonExtensionData { get; set; }
        public long ActiveConsumers { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.StringObjectReadOnlyDictionaryConverter?))]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?> Arguments { get; init; }
        public bool AutoDelete { get; init; }
        public EasyNetQ.Management.Client.Model.BackingQueueStatus? BackingQueueStatus { get; init; }
        public System.Collections.Generic.IReadOnlyList<EasyNetQ.Management.Client.Model.ConsumerDetail>? ConsumerDetails { get; init; }
        public long Consumers { get; init; }
        public bool Durable { get; init; }
        public string? ExclusiveConsumerTag { get; init; }
        public bool Exclusive { get; init; }
        public long? HeadMessageTimestamp { get; init; }
        public string? IdleSince { get; init; }
        public long Memory { get; init; }
        public long MessageBytes { get; init; }
        public EasyNetQ.Management.Client.Model.MessageStats? MessageStats { get; init; }
        public EasyNetQ.Management.Client.Model.LengthsDetails? MessagesDetails { get; init; }
        public EasyNetQ.Management.Client.Model.LengthsDetails? MessagesReadyDetails { get; init; }
        public long MessagesReady { get; init; }
        public EasyNetQ.Management.Client.Model.LengthsDetails? MessagesUnacknowledgedDetails { get; init; }
        public long MessagesUnacknowledged { get; init; }
        public long Messages { get; init; }
        public string? Node { get; init; }
        public string? Policy { get; init; }
        public System.Collections.Generic.IReadOnlyList<string>? SlaveNodes { get; init; }
        public string? State { get; init; }
        public System.Collections.Generic.IReadOnlyList<string>? SynchronisedSlaveNodes { get; init; }
        public EasyNetQ.Management.Client.Model.QueueType Type { get; init; }
    }
    public class QueueInfo : System.IEquatable<EasyNetQ.Management.Client.Model.QueueInfo>
    {
        public QueueInfo(bool AutoDelete = false, bool Durable = true, System.Collections.Generic.IReadOnlyDictionary<string, object?>? Arguments = null) { }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.StringObjectReadOnlyDictionaryConverter))]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?>? Arguments { get; init; }
        public bool AutoDelete { get; init; }
        public bool Durable { get; init; }
    }
    public enum QueueLocator
    {
        [System.Runtime.Serialization.EnumMember(Value="client-local")]
        ClientLocal = 0,
        [System.Runtime.Serialization.EnumMember(Value="balanced")]
        Balanced = 1,
    }
    public class QueueName : System.IEquatable<EasyNetQ.Management.Client.Model.QueueName>
    {
        public QueueName(string Name, string Vhost) { }
        public string Name { get; init; }
        public string Vhost { get; init; }
    }
    public class QueueTotals : System.IEquatable<EasyNetQ.Management.Client.Model.QueueTotals>
    {
        public QueueTotals(long Messages = 0, long MessagesReady = 0, long MessagesUnacknowledged = 0, EasyNetQ.Management.Client.Model.LengthsDetails? MessagesDetails = null, EasyNetQ.Management.Client.Model.LengthsDetails? MessagesReadyDetails = null, EasyNetQ.Management.Client.Model.LengthsDetails? MessagesUnacknowledgedDetails = null) { }
        public EasyNetQ.Management.Client.Model.LengthsDetails? MessagesDetails { get; init; }
        public EasyNetQ.Management.Client.Model.LengthsDetails? MessagesReadyDetails { get; init; }
        public long MessagesReady { get; init; }
        public EasyNetQ.Management.Client.Model.LengthsDetails? MessagesUnacknowledgedDetails { get; init; }
        public long MessagesUnacknowledged { get; init; }
        public long Messages { get; init; }
    }
    public enum QueueType
    {
        Classic = 0,
        Quorum = 1,
        Stream = 2,
    }
    public enum QueueVersion
    {
        V1 = 1,
        V2 = 2,
    }
    public class ShovelStatus : System.IEquatable<EasyNetQ.Management.Client.Model.ShovelStatus>
    {
        public ShovelStatus(
                    string Name,
                    string Vhost,
                    string Node,
                    System.DateTime Timestamp,
                    string Type,
                    string State,
                    string? SrcProtocol = null,
                    string? SrcUri = null,
                    string? SrcQueue = null,
                    string? SrcExchange = null,
                    string? SrcExchangeKey = null,
                    string? DestProtocol = null,
                    string? DestUri = null,
                    string? DestQueue = null,
                    string? DestExchange = null,
                    string? DestExchangeKey = null,
                    string? BlockedStatus = null,
                    string? Reason = null) { }
        [System.Text.Json.Serialization.JsonIgnore]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?>? ExtensionData { get; set; }
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, System.Text.Json.JsonElement>? JsonExtensionData { get; set; }
        public string? BlockedStatus { get; init; }
        public string? DestExchangeKey { get; init; }
        public string? DestExchange { get; init; }
        public string? DestProtocol { get; init; }
        public string? DestQueue { get; init; }
        public string? DestUri { get; init; }
        public string Name { get; init; }
        public string Node { get; init; }
        public string? Reason { get; init; }
        public string? SrcExchangeKey { get; init; }
        public string? SrcExchange { get; init; }
        public string? SrcProtocol { get; init; }
        public string? SrcQueue { get; init; }
        public string? SrcUri { get; init; }
        public string State { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(EasyNetQ.Management.Client.Serialization.DateTimeConverter?))]
        public System.DateTime Timestamp { get; init; }
        public string Type { get; init; }
        public string Vhost { get; init; }
    }
    public class SocketOpts : System.IEquatable<EasyNetQ.Management.Client.Model.SocketOpts>
    {
        public SocketOpts(int? Backlog = default, bool? Nodelay = default, bool? ExitOnClose = default) { }
        [System.Text.Json.Serialization.JsonIgnore]
        public System.Collections.Generic.IReadOnlyDictionary<string, object?>? ExtensionData { get; set; }
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, System.Text.Json.JsonElement>? JsonExtensionData { get; set; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        public int? Backlog { get; init; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        public bool? ExitOnClose { get; init; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        public bool? Nodelay { get; init; }
    }
    public class TopicPermission : System.IEquatable<EasyNetQ.Management.Client.Model.TopicPermission>
    {
        public TopicPermission(string User, string Vhost, string Exchange, string Write, string Read) { }
        public string Exchange { get; init; }
        public string Read { get; init; }
        public string User { get; init; }
        public string Vhost { get; init; }
        public string Write { get; init; }
    }
    public class TopicPermissionInfo : System.IEquatable<EasyNetQ.Management.Client.Model.TopicPermissionInfo>
    {
        public TopicPermissionInfo(string Exchange, string Write = ".*", string Read = ".*") { }
        public string Exchange { get; init; }
        public string Read { get; init; }
        public string Write { get; init; }
        public EasyNetQ.Management.Client.Model.TopicPermissionInfo DenyAllRead() { }
        public EasyNetQ.Management.Client.Model.TopicPermissionInfo DenyAllWrite() { }
        public EasyNetQ.Management.Client.Model.TopicPermissionInfo SetExchange(string exchange) { }
        public EasyNetQ.Management.Client.Model.TopicPermissionInfo SetRead(string resourcesToAllow) { }
        public EasyNetQ.Management.Client.Model.TopicPermissionInfo SetWrite(string resourcesToAllow) { }
    }
    public class User : System.IEquatable<EasyNetQ.Management.Client.Model.User>
    {
        public User(string Name, string PasswordHash, System.Collections.Generic.IReadOnlyList<string> Tags) { }
        public string Name { get; init; }
        public string PasswordHash { get; init; }
        public System.Collections.Generic.IReadOnlyList<string> Tags { get; init; }
    }
    public class UserInfo : System.IEquatable<EasyNetQ.Management.Client.Model.UserInfo>
    {
        public UserInfo(string? Password, string? PasswordHash, System.Collections.Generic.IReadOnlyList<string> Tags) { }
        public string? PasswordHash { get; init; }
        public string? Password { get; init; }
        public System.Collections.Generic.IReadOnlyList<string> Tags { get; init; }
        public EasyNetQ.Management.Client.Model.UserInfo AddTag(string tag) { }
        public static EasyNetQ.Management.Client.Model.UserInfo ByPassword(string password) { }
        public static EasyNetQ.Management.Client.Model.UserInfo ByPasswordHash(string passwordHash) { }
    }
    public static class UserTags
    {
        public const string Administrator = "administrator";
        public const string Impersonator = "impersonator";
        public const string Management = "management";
        public const string Monitoring = "monitoring";
        public const string Policymaker = "policymaker";
    }
    public class Vhost : System.IEquatable<EasyNetQ.Management.Client.Model.Vhost>
    {
        public Vhost(string Name, bool Tracing = false) { }
        public string Name { get; init; }
        public bool Tracing { get; init; }
    }
}